Longest Span with same Sum in two Binary arrays

Given two binary arrays, arr1[] and arr2[] of the same size n. Find the length of the longest common span (i, j) where j >= i such that arr1[i] + arr1[i+1] + …. + arr1[j] = arr2[i] + arr2[i+1] + …. + arr2[j].
The expected time complexity is Θ(n).

Input: arr1[] = {0, 1, 0, 0, 0, 0};
       arr2[] = {1, 0, 1, 0, 0, 1};
Output: 4
The longest span with same sum is from index 1 to 4.

Input: arr1[] = {0, 1, 0, 1, 1, 1, 1};
       arr2[] = {1, 1, 1, 1, 1, 0, 1};
Output: 6
The longest span with same sum is from index 1 to 6.

Input: arr1[] = {0, 0, 0};
       arr2[] = {1, 1, 1};
Output: 0

Input: arr1[] = {0, 0, 1, 0};
       arr2[] = {1, 1, 1, 1};
Output: 1 

Method 1:
One by one by consider same subarrays of both arrays. For all subarrays, compute sums and if sums are same and current length is more than max length, then update max length. Below is C++ implementation of the simple approach.  

Time complexity = O(n^2)
Auxilary Space = O(1)

int longestCommonSpanSum(bool arr1[], bool arr2[], int n) {
    int maxLen = 0;
    for(int i = 0; i < n; i++) {
        int sum1 = 0, sum2 = 0;
        for(int j = i; j < n; j++) {
            sum1 += arr1[j];
            sum2 += arr2[j];
            if(sum1 == sum2){
                int len = j - i + 1;
                if(len > maxLen)
                    maxLen = len;
            }
        }
    }
    return maxLen;
}

Example => 
arr1[] = {0, 1, 0, 1, 1, 1, 1};
arr2[] = {1, 1, 1, 1, 1, 0, 1};
---------------------------------------------------------
i = 0;
j = 0;
       sum1 = 0, sum2 = 1; sum1 != sum2; if condition halt;
j = 1;
       sum1 = 1, sum2 = 2; sum1 != sum2; if condition halt;
j = 2; 
       sum1 = 1, sum2 = 3; sum1 != sum2; if condition halt;
....
j = 6;
       sum1 = 5; sum2 = 6; sum1 != sum2; if condition halt;

for i = 0 maxLen = 0;
---------------------------------------------------------
i = 1;
j = 1;
       sum1 = 1, sum2 = 1; sum1 == sum2 => maxLen = 1;
j = 2;
       sum1 = 1, sum2 = 2; sum1 != sum2';
....
j = 5;
       sum1 = 4, sum2 = 4; sum1 == sum2 => maxLen = j-i+1 === 5-1+1===5
j = 6;
       sum1 = 5, sum2 = 5; sum1 == sum2 => maxLen ===6
----------------------------------------------------------------
if you incerase i then not chance to find the new length 



